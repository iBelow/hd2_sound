name: Build Check

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'assets/**'
  pull_request:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'  
      - 'assets/**'

env:
  BUILD_CONFIGURATION: Release
  BUILD_PLATFORM: x64

jobs:
  build-check:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup Windows SDK
      uses: GuillaumeFalourd/setup-windows10-sdk-action@v1.11
      with:
        sdk-version: 20348
        
    - name: Restore NuGet packages (if any)
      run: |
        if (Test-Path "*.sln") {
          nuget restore MicrophoneVolumeService.sln
        }
      shell: pwsh
      continue-on-error: true
      
    - name: Build solution
      run: msbuild MicrophoneVolumeService.sln /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=${{ env.BUILD_PLATFORM }} /p:PlatformToolset=v143
      
    - name: Build tests
      run: msbuild tests\SimpleTests.vcxproj /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=${{ env.BUILD_PLATFORM }} /p:PlatformToolset=v143
      continue-on-error: false
      
    - name: Run tests
      run: |
        Write-Host "üß™ Running tests..."
        $testExe = "tests\x64\Release\SimpleTests\SimpleTests.exe"
        if (Test-Path $testExe) {
          $testResult = & $testExe
          if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ All tests passed!"
          } else {
            Write-Error "‚ùå Some tests failed!"
            exit 1
          }
        } else {
          Write-Error "‚ùå Test executable not found: $testExe"
          exit 1
        }
      shell: pwsh
      
    - name: Test build result
      run: |
        if (Test-Path "x64\Release\MicrophoneVolumeService.exe") {
          Write-Host "‚úÖ Build successful!"
          $fileInfo = Get-Item "x64\Release\MicrophoneVolumeService.exe"
          Write-Host "üì¶ File size: $([math]::Round($fileInfo.Length / 1KB, 1)) KB"
          Write-Host "üìÖ Build time: $($fileInfo.LastWriteTime)"
          
          # Test version output
          Write-Host "üîç Testing version output:"
          & "x64\Release\MicrophoneVolumeService.exe" -version
        } else {
          Write-Error "‚ùå Build failed - executable not found"
          exit 1
        }
      shell: pwsh
      
    - name: Upload artifact for testing
      uses: actions/upload-artifact@v4
      with:
        name: build-test-${{ github.sha }}
        path: x64/Release/MicrophoneVolumeService.exe
        retention-days: 7
